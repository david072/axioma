// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `../calculator/dart_bridge/bind_header.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class CalculatorBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CalculatorBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CalculatorBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int create_calculator() {
    return _create_calculator();
  }

  late final _create_calculatorPtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function()>>('create_calculator');
  late final _create_calculator =
      _create_calculatorPtr.asFunction<int Function()>();

  FfiVec_FfiResultData calculate(
    int calculator,
    ffi.Pointer<ffi.Char> input,
  ) {
    return _calculate(
      calculator,
      input,
    );
  }

  late final _calculatePtr = _lookup<
      ffi.NativeFunction<
          FfiVec_FfiResultData Function(
              ffi.UintPtr, ffi.Pointer<ffi.Char>)>>('calculate');
  late final _calculate = _calculatePtr
      .asFunction<FfiVec_FfiResultData Function(int, ffi.Pointer<ffi.Char>)>();

  void free_results(
    FfiVec_FfiResultData results,
  ) {
    return _free_results(
      results,
    );
  }

  late final _free_resultsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(FfiVec_FfiResultData)>>(
          'free_results');
  late final _free_results =
      _free_resultsPtr.asFunction<void Function(FfiVec_FfiResultData)>();

  void free_calculator(
    int ptr,
  ) {
    return _free_calculator(
      ptr,
    );
  }

  late final _free_calculatorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'free_calculator');
  late final _free_calculator =
      _free_calculatorPtr.asFunction<void Function(int)>();
}

final class FfiResultData extends ffi.Struct {
  external ffi.Pointer<ffi.Char> str_value;

  @ffi.UintPtr()
  external int line_range_start;

  @ffi.UintPtr()
  external int line_range_end;

  @ffi.Bool()
  external bool is_error;
}

final class FfiVec_FfiResultData extends ffi.Struct {
  external ffi.Pointer<FfiResultData> array;

  @ffi.UintPtr()
  external int len;
}
